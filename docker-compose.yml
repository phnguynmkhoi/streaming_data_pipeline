x-spark-worker-common: 
  &spark-common
  image: spark-cluster:3.1.3
  environment:
    - SPARK_MASTER=spark://spark-master:7077
    - SPARK_WORKER_CORES=2
    - SPARK_WORKER_MEMORY=2G
    - SPARK_DRIVER_MEMORY=2G
    - SPARK_EXECUTOR_MEMORY=2G
    - SPARK_WORKLOAD=worker
  volumes:
    - ./apps:/opt/spark/spark-apps
  depends_on:
    - spark-master
  networks:
    - cdc_network

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: echo srvr | nc zookeeper 2181 || exit 1
      start_period: 10s
      retries: 20
      interval: 10s
    networks:
      - cdc_network

  broker:
    image: confluentinc/cp-kafka:7.4.0
    hostname: broker
    container_name: broker
    ports:
      - '29092:29092'
      - '9092:9092'
      - '9101:9101'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    networks:
      - cdc_network

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.4.0
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLuENT_METRICS_ENABLE: 'true'
      PORT: 9021
    networks:
      - cdc_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9021/health" ]
      interval: 30s
      timeout: 10s
      retries: 5

  debezium:
    image: debezium/connect:2.7.3.Final
    container_name: debezium
    hostname: debezium
    depends_on:
      postgres:
        condition: service_healthy
      broker:
        condition: service_healthy
    ports:
      - '8093:8083'
    environment:
      BOOTSTRAP_SERVERS: broker:29092
      CONNECT_REST_ADVERTISED_HOST_NAME: debezium
      GROUP_ID: 1
      CONFIG_STORAGE_TOPIC: connect_configs
      STATUS_STORAGE_TOPIC: connect_statuses
      OFFSET_STORAGE_TOPIC: connect_offsets
      KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      ENABLE_DEBEZIUM_SCRIPTING: 'true'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    healthcheck:
      test:
        [ 'CMD', 'curl', '--silent', '--fail', '-X', 'GET', 'http://localhost:8083/connectors', ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cdc_network

  debezium-ui:
    image: debezium/debezium-ui:latest
    container_name: debezium-ui
    hostname: debezium-ui
    depends_on:
      debezium:
        condition: service_healthy
    ports:
      - '8080:8080'
    environment:
      KAFKA_CONNECT_URIS: http://debezium:8083
    networks:
      - cdc_network

  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    ports:
      - '5432:5432'
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: cdc_db
    command: [ 'postgres', '-c', 'wal_level=logical' ]
    healthcheck:
      test: [ 'CMD', 'psql', '-U', 'postgres', '-c', 'SELECT 1' ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - cdc_network
    # volumes:
    #   - postgres_data:/var/lib/postgresql/data

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      MINIO_ROOT_USER: minioadmin         # Default access key (change it)
      MINIO_ROOT_PASSWORD: minioadmin     # Default secret key (change it)
    ports:
      - "10000:9000"   # MinIO API port
      - "10001:9001"   # MinIO console port
    volumes:
      - minio-volume:/data
    command: server /data --console-address ":9001"
    networks:
      - cdc_network

  spark-master:
    image: spark-cluster:3.1.3
    container_name: spark-master
    ports:
      - "9090:8080"
      - "7077:7077"
      - "4040-4060:4040-4060"
    volumes:
      # - ./jars:/opt/spark/jars
      - ./apps:/opt/spark/spark-apps
    networks:
      - cdc_network
    # environment:
      # - SPARK_LOCAL_IP=spark-master
      # - SPARK_WORKLOAD=master

  spark-worker-a:
    <<: *spark-common
    container_name: worker-a
    ports:
      - "9091:8080"
      - "7000:7000"
    # environment:
      # - SPARK_LOCAL_IP=spark-worker-a 
      # - SPARK_WORKLOAD=worker
  
  spark-worker-b:
    <<: *spark-common
    container_name: worker-b
    ports:
      - "9093:8080"
      - "7001:7000"

volumes:
  minio-volume:
  # postgres_data:

networks:
  cdc_network:
    name: cdc_network
    driver: bridge